// Code generated by mockery v2.16.0. DO NOT EDIT.

package service

import (
	context "context"

	models "github.com/EduardoFernandezLBX/ProjectKardex.git/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// AddEntrada provides a mock function with given fields: ctx, entrada
func (_m *MockService) AddEntrada(ctx context.Context, entrada models.Entradas) error {
	ret := _m.Called(ctx, entrada)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Entradas) error); ok {
		r0 = rf(ctx, entrada)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddProducto provides a mock function with given fields: ctx, producto
func (_m *MockService) AddProducto(ctx context.Context, producto models.Productos) error {
	ret := _m.Called(ctx, producto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Productos) error); ok {
		r0 = rf(ctx, producto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddSalida provides a mock function with given fields: ctx, salida
func (_m *MockService) AddSalida(ctx context.Context, salida models.Salidas) error {
	ret := _m.Called(ctx, salida)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Salidas) error); ok {
		r0 = rf(ctx, salida)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllEntradas provides a mock function with given fields: ctx
func (_m *MockService) GetAllEntradas(ctx context.Context) ([]models.Entradas, error) {
	ret := _m.Called(ctx)

	var r0 []models.Entradas
	if rf, ok := ret.Get(0).(func(context.Context) []models.Entradas); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Entradas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllMovimientos provides a mock function with given fields: ctx
func (_m *MockService) GetAllMovimientos(ctx context.Context) ([]models.Movimientos, error) {
	ret := _m.Called(ctx)

	var r0 []models.Movimientos
	if rf, ok := ret.Get(0).(func(context.Context) []models.Movimientos); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Movimientos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllProductos provides a mock function with given fields: ctx
func (_m *MockService) GetAllProductos(ctx context.Context) ([]models.Productos, error) {
	ret := _m.Called(ctx)

	var r0 []models.Productos
	if rf, ok := ret.Get(0).(func(context.Context) []models.Productos); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Productos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSalidas provides a mock function with given fields: ctx
func (_m *MockService) GetAllSalidas(ctx context.Context) ([]models.Salidas, error) {
	ret := _m.Called(ctx)

	var r0 []models.Salidas
	if rf, ok := ret.Get(0).(func(context.Context) []models.Salidas); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Salidas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntrada provides a mock function with given fields: ctx, FECHA
func (_m *MockService) GetEntrada(ctx context.Context, FECHA string) ([]models.Entradas, error) {
	ret := _m.Called(ctx, FECHA)

	var r0 []models.Entradas
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Entradas); ok {
		r0 = rf(ctx, FECHA)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Entradas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, FECHA)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMovimiento provides a mock function with given fields: ctx, FECHA
func (_m *MockService) GetMovimiento(ctx context.Context, FECHA string) ([]models.Movimientos, error) {
	ret := _m.Called(ctx, FECHA)

	var r0 []models.Movimientos
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Movimientos); ok {
		r0 = rf(ctx, FECHA)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Movimientos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, FECHA)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducto provides a mock function with given fields: ctx, ID_PROD
func (_m *MockService) GetProducto(ctx context.Context, ID_PROD string) (*models.Productos, error) {
	ret := _m.Called(ctx, ID_PROD)

	var r0 *models.Productos
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Productos); ok {
		r0 = rf(ctx, ID_PROD)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Productos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID_PROD)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSalida provides a mock function with given fields: ctx, FECHA
func (_m *MockService) GetSalida(ctx context.Context, FECHA string) ([]models.Salidas, error) {
	ret := _m.Called(ctx, FECHA)

	var r0 []models.Salidas
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Salidas); ok {
		r0 = rf(ctx, FECHA)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Salidas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, FECHA)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveProducto provides a mock function with given fields: ctx, ID_PROD
func (_m *MockService) RemoveProducto(ctx context.Context, ID_PROD string) error {
	ret := _m.Called(ctx, ID_PROD)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ID_PROD)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
