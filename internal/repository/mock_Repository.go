// Code generated by mockery v2.16.0. DO NOT EDIT.

package repository

import (
	context "context"

	entity "github.com/EduardoFernandezLBX/ProjectKardex.git/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// GetAllEntradas provides a mock function with given fields: ctx
func (_m *MockRepository) GetAllEntradas(ctx context.Context) ([]entity.Entradas, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Entradas
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Entradas); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Entradas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllMovimientos provides a mock function with given fields: ctx
func (_m *MockRepository) GetAllMovimientos(ctx context.Context) ([]entity.Movimientos, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Movimientos
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Movimientos); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Movimientos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllProductos provides a mock function with given fields: ctx
func (_m *MockRepository) GetAllProductos(ctx context.Context) ([]entity.Productos, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Productos
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Productos); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Productos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSalidas provides a mock function with given fields: ctx
func (_m *MockRepository) GetAllSalidas(ctx context.Context) ([]entity.Salidas, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Salidas
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Salidas); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Salidas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntrada provides a mock function with given fields: ctx, FECHA
func (_m *MockRepository) GetEntrada(ctx context.Context, FECHA string) ([]entity.Entradas, error) {
	ret := _m.Called(ctx, FECHA)

	var r0 []entity.Entradas
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Entradas); ok {
		r0 = rf(ctx, FECHA)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Entradas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, FECHA)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMovimiento provides a mock function with given fields: ctx, FECHA
func (_m *MockRepository) GetMovimiento(ctx context.Context, FECHA string) ([]entity.Movimientos, error) {
	ret := _m.Called(ctx, FECHA)

	var r0 []entity.Movimientos
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Movimientos); ok {
		r0 = rf(ctx, FECHA)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Movimientos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, FECHA)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducto provides a mock function with given fields: ctx, ID_PROD
func (_m *MockRepository) GetProducto(ctx context.Context, ID_PROD string) (*entity.Productos, error) {
	ret := _m.Called(ctx, ID_PROD)

	var r0 *entity.Productos
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Productos); ok {
		r0 = rf(ctx, ID_PROD)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Productos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID_PROD)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSalida provides a mock function with given fields: ctx, FECHA
func (_m *MockRepository) GetSalida(ctx context.Context, FECHA string) ([]entity.Salidas, error) {
	ret := _m.Called(ctx, FECHA)

	var r0 []entity.Salidas
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Salidas); ok {
		r0 = rf(ctx, FECHA)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Salidas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, FECHA)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveProducto provides a mock function with given fields: ctx, ID_PROD
func (_m *MockRepository) RemoveProducto(ctx context.Context, ID_PROD string) error {
	ret := _m.Called(ctx, ID_PROD)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ID_PROD)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveEntrada provides a mock function with given fields: ctx, ID, FECHA, NUM_REGISTRO, ID_PROD, CATEGORIA, NAME_PRODUCTO, TIPO_UNIDAD, COMENTARIO, CANTIDAD
func (_m *MockRepository) SaveEntrada(ctx context.Context, ID int, FECHA string, NUM_REGISTRO int, ID_PROD string, CATEGORIA string, NAME_PRODUCTO string, TIPO_UNIDAD string, COMENTARIO string, CANTIDAD int) error {
	ret := _m.Called(ctx, ID, FECHA, NUM_REGISTRO, ID_PROD, CATEGORIA, NAME_PRODUCTO, TIPO_UNIDAD, COMENTARIO, CANTIDAD)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, int, string, string, string, string, string, int) error); ok {
		r0 = rf(ctx, ID, FECHA, NUM_REGISTRO, ID_PROD, CATEGORIA, NAME_PRODUCTO, TIPO_UNIDAD, COMENTARIO, CANTIDAD)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveProducto provides a mock function with given fields: ctx, ID_PROD, CATEGORIA, NAME_PRODUCTO, TIPO_UNIDAD
func (_m *MockRepository) SaveProducto(ctx context.Context, ID_PROD string, CATEGORIA string, NAME_PRODUCTO string, TIPO_UNIDAD string) error {
	ret := _m.Called(ctx, ID_PROD, CATEGORIA, NAME_PRODUCTO, TIPO_UNIDAD)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, ID_PROD, CATEGORIA, NAME_PRODUCTO, TIPO_UNIDAD)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveSalida provides a mock function with given fields: ctx, ID, FECHA, NUM_REGISTRO, ID_PROD, CATEGORIA, NAME_PRODUCTO, COMENTARIO, CANTIDAD
func (_m *MockRepository) SaveSalida(ctx context.Context, ID int, FECHA string, NUM_REGISTRO int, ID_PROD string, CATEGORIA string, NAME_PRODUCTO string, COMENTARIO string, CANTIDAD int) error {
	ret := _m.Called(ctx, ID, FECHA, NUM_REGISTRO, ID_PROD, CATEGORIA, NAME_PRODUCTO, COMENTARIO, CANTIDAD)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, int, string, string, string, string, int) error); ok {
		r0 = rf(ctx, ID, FECHA, NUM_REGISTRO, ID_PROD, CATEGORIA, NAME_PRODUCTO, COMENTARIO, CANTIDAD)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
